package com.javaweb.mqtt;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;
public class MqttExample {

    private static final String BROKER = "tcp://broker.hivemq.com:1883";
    private static final String CLIENT_ID = "JavaClient-" + System.currentTimeMillis();
    private static final String SUB_TOPIC = "/23127341/temperature";
    private static final String PUB_TOPIC = "/23127341/led";

    public static void main(String[] args) {
        try {
            // T·∫°o client MQTT
            MqttClient client = new MqttClient(BROKER, CLIENT_ID, new MemoryPersistence());

            // Thi·∫øt l·∫≠p callback
            client.setCallback(new MqttCallback() {
                @Override
                public void connectionLost(Throwable cause) {
                    System.out.println("‚ùå M·∫•t k·∫øt n·ªëi: " + cause.getMessage());
                }

                @Override
                public void messageArrived(String topic, MqttMessage message) {
                    System.out.println("üì• Nh·∫≠n ƒë∆∞·ª£c t·ª´ [" + topic + "]: " + message.toString());
                }

                @Override
                public void deliveryComplete(IMqttDeliveryToken token) {
                    System.out.println("‚úÖ G·ª≠i th√†nh c√¥ng.");
                }
            });

            // Thi·∫øt l·∫≠p t√πy ch·ªçn k·∫øt n·ªëi
            MqttConnectOptions options = new MqttConnectOptions();
            options.setCleanSession(true);
            options.setAutomaticReconnect(true); // T·ª± ƒë·ªông reconnect n·∫øu m·∫•t m·∫°ng

            client.connect(options);
            System.out.println("‚úÖ ƒê√£ k·∫øt n·ªëi t·ªõi MQTT Broker!");

            // ƒêƒÉng k√Ω nh·∫≠n d·ªØ li·ªáu t·ª´ topic
            client.subscribe(SUB_TOPIC);
            System.out.println("üîî ƒêang l·∫Øng nghe topic: " + SUB_TOPIC);

            // G·ª≠i d·ªØ li·ªáu b·∫≠t LED
            String msg = "on"; // Thay "off" n·∫øu c·∫ßn t·∫Øt
            MqttMessage mqttMessage = new MqttMessage(msg.getBytes());
            mqttMessage.setQos(0);
            mqttMessage.setRetained(true);     // L∆∞u l·∫°i tr√™n broker
            client.publish(PUB_TOPIC, mqttMessage);
            System.out.println("üöÄ ƒê√£ g·ª≠i: " + msg + " t·ªõi topic " + PUB_TOPIC);

            // Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
            while (true) {
                Thread.sleep(5000); // Ho·∫∑c c√≥ th·ªÉ x·ª≠ l√Ω logic kh√°c ·ªü ƒë√¢y
            }

        } catch (MqttException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
